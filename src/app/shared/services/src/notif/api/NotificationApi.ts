/**
 * Garden Caring : Services
 * This is the Transfarmers backend api documentation
 *
 * OpenAPI spec version: 0.1
 * Contact: mathias.couste@garden-sharing.fr
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class NotificationApi {
    protected basePath = 'http://gardencaring-services.eu-gb.mybluemix.net/rest';
    //public defaultHeaders : Headers = new Headers({'Content-Type': 'text/plain; application/x-www-form-urlencoded; multipart/form-data'});
   // public defaultHeaders : Headers = new Headers({'Access-Control-Allow-Origin': "http://localhost:3000"});
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Find account using an id.
     * 
     * @param notificationid Notificationid
     */
    public findAccount (notificationid: string, extraHttpRequestParams?: any ) : Observable<models.Notification> {
        const path = this.basePath + '/notification/{notificationid}'
            .replace('{' + 'notificationid' + '}', String(notificationid));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'notificationid' is set
        if (!notificationid) {
            throw new Error('Missing required parameter notificationid when calling findAccount');
        }
        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * List notification
     * 
     * @param accountid accoundid
     * @param plotid accountid
     */
    public listAccount (accountid?: string, plotid?: string, extraHttpRequestParams?: any ) : Observable<Array<models.Notification>> {
        const path = this.basePath + '/notification';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (accountid !== undefined) {
            queryParameters.set('accountid', accountid);
        }

        if (plotid !== undefined) {
            queryParameters.set('plotid', plotid);
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
